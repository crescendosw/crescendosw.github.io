{"version":3,"sources":["MidiPlaybackEnvironment.tsx","index.tsx","App.tsx"],"names":["MidiPlaybackEnvironment","props","initialTempo","initialTime","songLength","instrument","interval","nodes","audioContext","midiPlayer","state","playing","instrumentIsLoaded","experiencingUserInputOnTimeSlider","_handleEvent","bind","_instrumentLoaded","_play","_getTempoValue","_setNewTime","_setNewTempo","_displayTempo","_getButtonText","_displayTime","MidiPlayer","Player","AudioContext","instrumentName","window","navigator","userAgent","includes","SoundFont","then","newTempo","Number","this","tempoSliderElement","document","getElementById","value","setState","timeSliderElement","isPlaying","skipToPercent","play","timeOutputElement","secondsSelected","innerHTML","_getTimeValue","setTempo","Math","round","toString","abs","getSongPercentRemaining","currentTime","_getCurrentPercent","event","gain","name","channel","velocity","_getSopranoValue","_getAltoValue","_getTenorValue","_getBassValue","node","noteName","stop","pause","console","log","midiFilePath","fetch","response","arrayBuffer","buffer","loadArrayBuffer","getTempo","getSongTime","id","type","defaultValue","min","max","step","onInput","onPointerUp","onMouseUp","onTouchEnd","onClick","setInterval","_getTimeOutput","clearInterval","sopranoValue","altoValue","tenorValue","bassValue","secondsElapsed","seconds","minutes","trunc","React","Component","ReactDOM","render","basename","exact","path","component","to","hymnalDisplayList","useState","hymnalArray","setHymnalArray","hymnalsManifest","useEffect","json","data","catch","map","hymnalName","i","length","manifestPath","context","history","search","useLocation","URLSearchParams","get","churchName","count","hymnObjectArray","setHymnObjectArray","appendZeros","number","generateSongDisplayName","hymn","title","toUpperCase","psalm","generateKey","generateHymnList","generateHTMLTable","tableHeader","hymnal","tableRows","className","generateThisWeekTables","tempArray","tableArray","push","j","determineContext","placeholder","onKeyUp","songElement","textValue","bolded","firstHalf","slice","secondHalf","allCaps","songArray","filter","getElementsByTagName","textContent","innerText","indexOf","bold","style","display","updateSearch","autoComplete","songName","songNumber","midiFile","generateFileName","pdfFile","fileType","generatePathFor","fileName","pdfFilePath","churchesDisplayList","churchesArray","setChurchesArray","churchesManifest","href"],"mappings":"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","file":"static/js/main.80b340f2.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont, {Player} from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\nimport './MidiPlaybackEnvironment.css';\n\ninterface Props {\n  midiFilePath: string;\n  pdfFilePath: string;\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: string;\n  initialTime: string;\n  songLength: number;\n  instrumentIsLoaded: boolean;\n  experiencingUserInputOnTimeSlider: boolean;\n}\n\nexport class MidiPlaybackEnvironment extends React.Component<Props, State> {\n  initialTempo: string | undefined;\n  initialTime: string | undefined;\n  songLength: number | undefined;\n  instrument: Player | undefined;\n  interval: number | undefined;\n  nodes: { [channel: number]: any } = {};\n  audioContext: AudioContext | undefined;\n  midiPlayer: MidiPlayer.Player;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: \"LOADING\",\n      initialTime: \"0:00\",\n      songLength: 0,\n      instrumentIsLoaded: false,\n      experiencingUserInputOnTimeSlider: false,\n    };\n\n    this._handleEvent = this._handleEvent.bind(this);\n    this._instrumentLoaded = this._instrumentLoaded.bind(this);\n    this._play = this._play.bind(this);\n    //this._loadMidiFile = this._loadMidiFile.bind(this);\n    this._getTempoValue = this._getTempoValue.bind(this);\n    this._setNewTime = this._setNewTime.bind(this);\n    this._setNewTempo = this._setNewTempo.bind(this);\n    this._displayTempo = this._displayTempo.bind(this);\n    this._getButtonText = this._getButtonText.bind(this);\n    this._displayTime = this._displayTime.bind(this);\n    this.midiPlayer = new MidiPlayer.Player(this._handleEvent);\n\n    this.audioContext = new AudioContext();\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n    //@ts-ignore\n    SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n  }\n\n  private static _getSopranoValue(): number {\n    const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n    let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n    return Number(sopranoValue);\n  }\n\n  private static _getAltoValue(): number {\n    const altoSliderElement = document.getElementById(\"alto-slider\");\n    let altoValue = (altoSliderElement as HTMLInputElement).value;\n    return Number(altoValue);\n  }\n\n  private static _getTenorValue(): number {\n    const tenorSliderElement = document.getElementById(\"tenor-slider\");\n    let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n    return Number(tenorValue);\n  }\n\n  private static _getBassValue(): number {\n    const bassSliderElement = document.getElementById(\"bass-slider\");\n    let bassValue = (bassSliderElement as HTMLInputElement).value;\n    return Number(bassValue);\n  }\n\n  private static _getTimeValue(secondsElapsed: number): string {\n    let seconds: string;\n    let minutes: number = 0;\n\n    if (secondsElapsed < 10) {\n      seconds = \"0\" + Math.trunc(secondsElapsed);\n    }\n    else {\n      if (secondsElapsed < 60) {\n        minutes = 0;\n        seconds = (Math.trunc(secondsElapsed)).toString();\n      }\n      else if (secondsElapsed % 60 === 0) {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = \"00\";\n      }\n      else {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = (secondsElapsed % 60).toString();\n      }\n    }\n    return minutes + \":\" + seconds;\n  }\n\n  private _getTempoValue(): number {\n    let newTempo: number = Number(this.state.initialTempo)\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n\n    if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n          0.25))\n    }\n    else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n    }\n    return newTempo;\n  }\n\n  private _setNewTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: false});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n\n    if (this.midiPlayer.isPlaying()) {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n      this.midiPlayer.play();\n    }\n    else {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n    }\n  }\n\n  private _displayTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: true});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n    let secondsSelected = ((Number((timeSliderElement as HTMLInputElement).value) / 100) * this.state.songLength);\n\n    (timeOutputElement as HTMLOutputElement).innerHTML = MidiPlaybackEnvironment._getTimeValue(secondsSelected);\n  }\n\n  private _setNewTempo(): void {\n    this.midiPlayer.setTempo(this._getTempoValue());\n  }\n\n  private _displayTempo(): void {\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    (tempoOutputElement as HTMLInputElement).innerHTML = (Math.round(this._getTempoValue())).toString();\n  }\n\n  private _getButtonText(): string {\n    if (!this.state.instrumentIsLoaded) {\n      return \"loading\";\n    }\n    else {\n      if (this.midiPlayer.isPlaying()) {\n        return \"pause\";\n      }\n      else {\n        return \"play\";\n      }\n    }\n  }\n\n  private _getCurrentPercent(): number {\n    return Math.abs(100 - this.midiPlayer.getSongPercentRemaining());\n  }\n\n  private _getTimeOutput(): string {\n    let currentTime = (this._getCurrentPercent() / 100) * this.state.songLength;\n\n    if (this.state.instrumentIsLoaded) {\n      return MidiPlaybackEnvironment._getTimeValue(currentTime);\n    }\n    else {\n      return \"LOADING\"\n    }\n  }\n\n  private _handleEvent(event: any): void {\n    let gain: number = 100;\n\n    if (event.name === 'Note on') {\n\n      switch (event.channel) {\n        case 1:\n          gain = event.velocity * (MidiPlaybackEnvironment._getSopranoValue() / 10);\n          break;\n        case 2:\n          gain = event.velocity * (MidiPlaybackEnvironment._getAltoValue() / 10);\n          break;\n        case 3:\n          gain = event.velocity * (MidiPlaybackEnvironment._getTenorValue() / 10);\n          break;\n        case 4:\n          gain = event.velocity * (MidiPlaybackEnvironment._getBassValue() / 10);\n          break;\n      }\n\n      const node = this.instrument!.play(event.noteName, this.audioContext!.currentTime, {gain}); //changed ? to !\n\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n      }\n\n      this.nodes[event.channel] = node;\n\n    }\n    else if (event.name === 'Note off') {\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n        delete this.nodes[event.channel];\n      }\n    }\n  }\n\n  /*private _loadMidiFile(): void {\n    if (!this.audioContext) {\n      this.audioContext = new AudioContext();\n      const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n      //@ts-ignore\n      SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n    }\n  }*/\n\n  private _play(): undefined {\n    if (this.state.instrumentIsLoaded) {\n      if (this.state.playing) {   //if playing, stop\n        this.midiPlayer!.pause();\n        this.setState({playing: false});\n        return undefined;\n      }\n      this.setState({playing: true});   //start playing\n      this.midiPlayer.play();\n      return undefined;\n    }\n  }\n\n  private _instrumentLoaded(instrument: Player): undefined {\n    this.instrument = instrument;\n\n    const loadArrayBuffer = (buffer: ArrayBuffer) => {\n      this.midiPlayer.loadArrayBuffer(buffer);\n      this.setState({initialTempo: this.midiPlayer.getTempo().toString()});\n      this.setState({songLength: this.midiPlayer.getSongTime()});\n      this.setState({initialTime: \"0:00\"});\n    }\n\n    //todo (Cole): fetch this.props.midiFilePath\n    console.log(this.props.midiFilePath);\n    fetch(this.props.midiFilePath)\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n\n    this.setState({instrumentIsLoaded: true});\n    return undefined\n  }\n\n  render() {\n    return (\n        <div>\n          <form id = \"slider-form\">\n            <label id = \"soprano-label\">Soprano:</label>\n            <input type = \"range\" id = \"soprano-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"alto-label\">Alto:</label>\n            <input type=\"range\" id=\"alto-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"tenor-label\">Tenor:</label>\n            <input type = \"range\" id = \"tenor-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"bass-label\">Bass:</label>\n            <input type = \"range\" id = \"bass-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"tempo-label\">Tempo:</label>\n            <input type = \"range\" id =\" tempo-slider\" defaultValue = {0.5} min = {0} max = {1} step = {0.01}\n                   onInput = {this._displayTempo} onPointerUp = {this._setNewTempo}/><br/>\n          </form>\n\n          <label>Tempo: </label>\n          <output id=\"tempo-output\">{this.state.initialTempo}</output>\n\n          <div id=\"bottom-div\">\n            <div id=\"time-slider-and-output-div\">\n              <output id=\"time-output\">{this.state.initialTime}</output>\n              <input type=\"range\" id=\"time-slider\" onInput={this._displayTime} onMouseUp={this._setNewTime}\n                     onTouchEnd={this._setNewTime} defaultValue={0} min={0} max={100} step={0.01}/><br/>\n            </div>\n\n            <button id=\"play-button\" onClick={this._play}>{this._getButtonText()}</button>\n          </div>\n        </div>\n    )\n  }\n\n  componentDidMount() {\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n\n    this.interval = window.setInterval(() => {\n      if (this.state.instrumentIsLoaded) {\n        if (this.midiPlayer.isPlaying()) {\n          if (!this.state.experiencingUserInputOnTimeSlider) {\n            (timeSliderElement as HTMLOutputElement).value = this._getCurrentPercent().toString();\n            (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeOutput();\n          }\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { HomePage, SongsPage, HymnsPage, PlayerPage, ThisWeekPage, FavoritesPage, MenuPage, SettingsPage } from './App';\nimport './index.css';\n\nlet basename = '/';\n\nReactDOM.render(\n    <Router basename={basename}>\n        <Switch>\n            <Route exact path = '/' component = {HomePage}/>\n            <Route exact path = \"/songs\" component = {SongsPage}/>\n            <Route exact path = \"/hymns\" component = {HymnsPage}/>\n            <Route exact path = \"/player\" component = {PlayerPage}/>\n            <Route exact path = \"/this_week\" component = {ThisWeekPage}/>\n            <Route exact path = \"/favorites\" component = {FavoritesPage}/>\n            <Route exact path = \"/menu\" component={MenuPage}/>\n            <Route exact path = \"/settings\" component = {SettingsPage}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n);","import React, { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MidiPlaybackEnvironment } from './MidiPlaybackEnvironment';\nimport './App.css';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Sing Your Part</h1>\n            <ul id='homepage-list'>\n                <li/><Link to='/songs'>Songs</Link>\n                <li/><Link to='/this_week'>This Week</Link>\n                <li/><Link to='/favorites'>Favorites</Link>\n                <li/><Link to='/menu'>Menu</Link>\n            </ul>\n        </div>\n    )\n};\n\nconst SongsPage = () => {\n    const [hymnalArray, setHymnalArray] = useState([]);\n    let hymnalDisplayList;\n    const hymnalsManifest = '../hymnals/manifest.json'\n\n    useEffect(() => {\n        fetch(hymnalsManifest)\n            .then((response) => response.json())\n            .then((data) => {\n                setHymnalArray(data);\n            })\n            .catch(function() {\n                throw 'Error: HTTP-status 404, bad request, could not fetch: ' + hymnalsManifest;\n            });\n    }, [hymnalsManifest]);\n\n    hymnalDisplayList = hymnalArray.map(function(hymnalName) {\n        return <li key={hymnalName}>\n            <Link to={`/hymns?hymnal=${hymnalName}`}>{hymnalName}</Link></li>;\n    })\n\n    for(let i = 0; i < hymnalArray.length; i++) {\n\n    }\n\n    return (\n        <div>\n            <h1 id='songs-header'>Songs</h1>\n            <ul id='hymnal-list'>{hymnalDisplayList}</ul>\n        </div>\n    )\n};\n\nconst HymnsPage = () => {\n    const search = useLocation().search;\n    const hymnalName = new URLSearchParams(search).get('hymnal');\n    const churchName = new URLSearchParams(search).get('church');\n    let manifestPath: string;\n    let count = -1;\n    const [hymnObjectArray, setHymnObjectArray] = useState([]);\n\n    function appendZeros(number: number | null): string | undefined {\n        if(number) {\n\n            switch(number.toString().length) {\n                case 1:\n                    return \"00\" + number;\n                case 2:\n                    return \"0\" + number;\n                case 3:\n                    return number.toString();\n            }\n        }\n    }\n\n    function updateSearch(context: string) {\n        let input = (document.getElementById('song-search-bar') as HTMLInputElement).value;\n        let filter = input.toUpperCase();\n        let songElement, textValue, bolded, firstHalf, slice, secondHalf, allCaps, element, songArray;\n\n        if (context === 'hymnal') {\n            element = document.getElementById('hymn-list') as HTMLOutputElement;\n            songArray = element.getElementsByTagName('li');\n        }\n        else {\n            element = document.getElementById('this-week-div') as HTMLOutputElement;\n            songArray = element.getElementsByTagName('tr');\n        }\n\n        for (let i = 0; i < songArray.length; i++) {\n            songElement = songArray[i].getElementsByTagName('a')[0];\n            textValue = songElement.textContent || songElement.innerText;\n            allCaps = textValue.toUpperCase();\n\n            if (allCaps.includes(filter)) {\n                firstHalf = textValue.slice(0, allCaps.indexOf(filter));\n                slice = textValue.slice(allCaps.indexOf(filter), allCaps.indexOf(filter) + filter.length)\n                secondHalf = textValue.slice(allCaps.indexOf(filter) + filter.length);\n                bolded = firstHalf + slice.bold() + secondHalf;\n\n                songElement.innerHTML = bolded;\n                songArray[i].style.display = '';\n            }\n            else {\n                songArray[i].style.display = 'none';\n            }\n        }\n    }\n\n    function displaySearchResults(): void {\n        updateSearch(determineContext())\n    }\n\n    function generateSongDisplayName(hymn: {number: number, title: string, psalm: string, hymnal: string}) {\n\n        let number = appendZeros(hymn.number);\n        let title = hymn.title.toUpperCase();\n\n        if(title.includes('PSALM')) {\n            return number + ' - ' + hymn.title;\n        }\n        else {\n            if(hymn.psalm) {\n                return number + ' - ' + hymn.title + ' - ' + hymn.psalm;\n            }\n            else {\n                return number + ' - ' + hymn.title;\n            }\n        }\n    }\n\n    function generateKey(): number {\n        count++;\n        return count;\n    }\n\n    function getHeader(history: string): string | null {\n        if(history === 'this_week') {\n            return churchName;\n        }\n        else {\n            return hymnalName;\n        }\n    }\n\n    function generateHymnList(hymnObjectArray: any[]): any {\n        return hymnObjectArray.map((hymn: {number: number; title: string; psalm: string; hymnal: string;}) => {\n            return (\n                <li key={generateKey()}>\n                    <Link to={`/player?hymnal=${hymnalName}&title=${hymn.title}&number=${appendZeros(hymn.number)}&psalm=${hymn.psalm}`}>\n                        {generateSongDisplayName(hymn)}</Link>\n                </li>\n            )\n        });\n    }\n\n    function generateHTMLTable(hymnObjectArray: any[]): any {\n        let tableHeader = hymnObjectArray[0].hymnal;\n        let tableRows =  hymnObjectArray.map((hymn: {number: number; title: string; psalm: string; hymnal: string;}) => {\n            return (\n                <tr key={generateKey()}>\n                    <Link to={`/player?hymnal=${hymn.hymnal}&title=${hymn.title}&number=${appendZeros(hymn.number)}&psalm=${hymn.psalm}`}>\n                        {generateSongDisplayName(hymn)}</Link>\n                </tr>\n            )\n        });\n        return (\n            <table className='this-week-table'>\n                <thead><b>{tableHeader}</b></thead>\n                <tbody>{tableRows}</tbody>\n            </table>\n        )\n    }\n\n    function generateThisWeekTables(hymnObjectArray: any[]): any[] {\n        let hymnalArray: string[] = [];\n        let tempArray = [];\n        let tableArray = [];\n\n        for(let i = 0; i < hymnObjectArray.length; i++) {\n            if(!hymnalArray.includes(hymnObjectArray[i].hymnal)) {\n                hymnalArray.push(hymnObjectArray[i].hymnal);\n            }\n        }\n\n        for(let i = 0; i < hymnalArray.length; i++) {\n            for(let j = 0; j < hymnObjectArray.length; j++) {\n                if(hymnalArray[i] === hymnObjectArray[j].hymnal) {\n                    tempArray.push(hymnObjectArray[j]);\n                }\n            }\n            tableArray.push(generateHTMLTable(tempArray));\n            tempArray = [];\n        }\n        return tableArray;\n    }\n\n    function generateSongDisplays(context: string | null) {\n        if(context === 'this_week') { //if need to display songs from this_week\n            return<div id='this-week-div'>{generateThisWeekTables(hymnObjectArray)}</div>\n        }\n        else if (context === 'hymnal') { //if need to display songs from a hymnal\n            return <ul id='hymn-list'>{generateHymnList(hymnObjectArray)}</ul>\n        }\n    }\n\n    function determineContext(): string {\n        if(hymnalName) {\n            return 'hymnal';\n        }\n        else {\n            return 'this_week';\n        }\n    }\n\n    if(determineContext() === 'hymnal') { //get manifest from a hymnal\n        manifestPath = '../hymnals/' + hymnalName + '/manifest.json';\n    }\n    else { //get manifest from this_week\n        manifestPath = '../this_week/' + churchName + '/' + churchName + '.json';\n    }\n\n    useEffect(() => {\n        fetch(manifestPath)\n            .then((response) => response.json())\n            .then((data) => {\n                setHymnObjectArray(data);\n            })\n            .catch(function () {\n                throw 'Error: HTTP-status 404, bad request, could not fetch: ' + manifestPath;\n            });\n    }, [manifestPath]);\n\n    return (\n        <div>\n            <h1 id='hymns-header'>{getHeader(determineContext())}</h1>\n            <input id='song-search-bar' type='text' placeholder='Search Songs' onKeyUp={displaySearchResults}\n                   autoComplete='off'/>\n            <div>{generateSongDisplays(determineContext())}</div>\n        </div>\n    )\n};\n\nconst ThisWeekPage = () => {\n    const [churchesArray, setChurchesArray] = useState([]);\n    let churchesManifest = '../this_week/manifest.json';\n    let churchesDisplayList: any;\n    let count = -1;\n\n    function generateKey() {\n        count++;\n        return count;\n    }\n\n    useEffect(() => {\n        fetch(churchesManifest)\n            .then((response) => response.json())\n            .then((data) => {\n                setChurchesArray(data);\n            })\n            .catch(function() {\n                throw 'Error: HTTP-status 404, bad request, could not fetch: ' + churchesManifest;\n            });\n    }, [churchesManifest]);\n\n    churchesDisplayList = churchesArray.map(function(churchName) {\n        return <li key={generateKey()}>\n            <Link to={`/hymns?church=${churchName}`}>{churchName}</Link></li>;\n    })\n    return (\n        <div>\n            <h1>This Week</h1>\n            <ul id='churches-list'>{churchesDisplayList}</ul>\n        </div>\n    )\n};\n\nconst FavoritesPage = () => {\n    return (\n        <div>\n            <h1>Favorites</h1>\n        </div>\n    )\n};\n\nconst MenuPage = () => {\n    return (\n        <div>\n            <h1>Menu</h1>\n            <ul id='menu-list'>\n                <li><Link to={`/settings`}>Settings</Link></li>\n                <li><a href='https://crescendosw.github.io/tutorial.htm'>Help</a></li>\n            </ul>\n        </div>\n    )\n};\n\nconst SettingsPage = () => {\n    return (\n        <div>\n            <h1>Settings</h1>\n        </div>\n    )\n};\n\nconst PlayerPage = () => {\n    const search = useLocation().search;\n    const songName = new URLSearchParams(search).get('title');\n    const songNumber = new URLSearchParams(search).get('number');\n    const hymnalName = new URLSearchParams(search).get('hymnal');\n    const psalm = new URLSearchParams(search).get('psalm');\n    const midiFile = generateFileName(songName, songNumber, psalm, 'mid');\n    const pdfFile = generateFileName(songName, songNumber, psalm, 'pdf');\n\n    function generateFileName(title: string | null, number: string | null, psalm: string | null, fileType: string): string {\n        if(title) {\n            let titleAllCaps = title.toUpperCase();\n\n            if(titleAllCaps.includes('PSALM')) {\n                return number + \" - \" + title + \".\" + fileType;\n            }\n            else {\n                if(psalm) {\n                    return number + \" - \" + title + ' - ' + psalm + \".\" + fileType;\n                }\n                else {\n                    return number + \" - \" + title + \".\" + fileType;\n                }\n            }\n        }\n        else {\n            return \"ERROR: No Title\"\n        }\n    }\n\n    function generatePathFor(fileName: string): string {\n        return '../hymnals/' + hymnalName + '/' + fileName;\n    }\n\n    return (\n        <MidiPlaybackEnvironment midiFilePath={generatePathFor(midiFile)} pdfFilePath={generatePathFor(pdfFile)}/>\n    )\n};\n\nexport { HomePage, SongsPage, HymnsPage, ThisWeekPage, FavoritesPage, MenuPage, PlayerPage, SettingsPage } ;"],"sourceRoot":""}