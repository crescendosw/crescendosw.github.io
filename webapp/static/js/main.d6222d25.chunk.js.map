{"version":3,"sources":["MidiTest.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["midiPlayer","MidiTest","props","state","playing","_play","bind","this","pause","setState","ac","AudioContext","nodes","instrumentName","window","navigator","userAgent","includes","SoundFont","instrument","then","console","log","fetch","response","arrayBuffer","buffer","byteLength","MidiPlayer","Player","event","channel","name","gain","velocity","node","play","noteName","currentTime","stop","loadArrayBuffer","onClick","React","Component","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAYIA,E,iCCZW,G,MAAA,IAA0B,kC,mFDc5BC,EAAb,kDACE,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CACXC,SAAS,GAEX,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBALW,EAD5B,yCASE,WACE,GAAIC,KAAKJ,MAAMC,QAGb,OAFAJ,EAAYQ,aACZD,KAAKE,SAAS,CAACL,SAAS,IAG1BG,KAAKE,SAAS,CAACL,SAAS,IACxB,IAAMM,EAAK,IAAIC,IACXC,EAAkC,GAEhCC,EAAiBC,OAAOC,UAAUC,UAAUC,SAAS,UACzD,8BAAgC,8BAGlCC,IAAUC,WAAWT,EAAIG,GAAgBO,MAAK,SAAUD,GA6BtDE,QAAQC,IAAR,qBACAC,MAAM,yBACHH,MAAK,SAAAI,GAAQ,OAAIA,EAASC,iBAC1BL,MAAK,SAAAM,GAAM,OA/BU,SAACA,GACvBL,QAAQC,IAAR,0BAA+BI,EAAOC,cACtC3B,EAAa,IAAI4B,IAAWC,QAAO,SAASC,GAE1C,GADAT,QAAQC,IAAIQ,EAAMC,SACC,YAAfD,EAAME,KAAoB,CAC5B,IAAMC,EAAyB,IAAlBH,EAAMC,QAAgBD,EAAMI,SAAS,GAAKJ,EAAMI,SAAS,IAChEC,EAAOhB,EAAWiB,KAAKN,EAAMO,SAAU3B,EAAG4B,YAAa,CAACL,SAC1DrB,EAAMkB,EAAMC,UACdnB,EAAMkB,EAAMC,SAASQ,OAEvB3B,EAAMkB,EAAMC,SAAWI,MAEC,aAAfL,EAAME,MACXpB,EAAMkB,EAAMC,WACdnB,EAAMkB,EAAMC,SAASQ,cACd3B,EAAMkB,EAAMC,cASdS,gBAAgBd,GAC3B1B,EAAWoC,OAMKI,CAAgBd,WAvDxC,oBA4DE,WACE,OACE,wBAAQe,QAASlC,KAAKF,MAAtB,SACGE,KAAKJ,MAAMC,QAAU,aAAe,kBA/D7C,GAA8BsC,IAAMC,WEcrBC,MAvBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,yBAQA,uBACA,cAAC,EAAD,UCROC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6222d25.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n}\n\nlet midiPlayer: MidiPlayer.Player;\n\nexport class MidiTest extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      playing: false\n    };\n    this._play = this._play.bind(this);\n  }\n\n  private _play(): undefined {\n    if (this.state.playing) {\n      midiPlayer!.pause();\n      this.setState({playing: false});\n      return undefined;\n    }\n    this.setState({playing: true});\n    const ac = new AudioContext();\n    let nodes: {[channel: number]: any} = {};\n\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n      'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n\n    // @ts-ignore\n    SoundFont.instrument(ac, instrumentName).then(function (instrument) {\n      const loadArrayBuffer = (buffer: ArrayBuffer) => {\n        console.log(`loadArrayBuffer ${buffer.byteLength}`);\n        midiPlayer = new MidiPlayer.Player(function(event: any) {\n          console.log(event.channel);\n          if (event.name === 'Note on') {\n            const gain = event.channel === 4 ? event.velocity/25 : event.velocity/100;\n            const node = instrument.play(event.noteName, ac.currentTime, {gain});\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n            }\n            nodes[event.channel] = node;\n            //document.querySelector('#track-' + event.track + ' code').innerHTML = JSON.stringify(event);\n          } else if (event.name === 'Note off') {\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n              delete nodes[event.channel];\n            }\n          }\n\n          // document.getElementById('tempo-display').innerHTML = Player.tempo;\n          // document.getElementById('file-format-display').innerHTML = Player.format;\n          // document.getElementById('play-bar').style.width = 100 - Player.getSongPercentRemaining() + '%';\n        });\n\n        midiPlayer.loadArrayBuffer(buffer);\n        midiPlayer.play();\n      }\n\n      console.log(`instrument loaded`);\n      fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n    });\n    return undefined;\n  }\n\n  render() {\n    return (\n      <button onClick={this._play}>\n        {this.state.playing ? \"Pause Song\" : \"Play Song\"}\n      </button>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {MidiTest} from \"./MidiTest\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <br/>\n        <MidiTest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}