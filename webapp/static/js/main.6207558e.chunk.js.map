{"version":3,"sources":["MidiTest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["midiPlayer","MidiTest","props","state","playing","_play","bind","this","pause","setState","ac","AudioContext","nodes","instrumentName","window","navigator","userAgent","includes","SoundFont","instrument","then","loadArrayBuffer","buffer","console","log","byteLength","MidiPlayer","Player","event","name","gain","channel","velocity","sopranoValue","document","getElementById","value","Number","getSopranoValue","altoValue","getAltoValue","tenorValue","getTenorValue","bassValue","getBassValue","node","play","noteName","currentTime","stop","fetch","response","arrayBuffer","onClick","type","id","defaultValue","min","max","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sJAYIA,E,0HA2BG,IAAMC,EAAb,kDACE,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CACXC,SAAS,GAEX,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBALW,EAD5B,yCASE,WACE,GAAIC,KAAKJ,MAAMC,QAGb,OAFAJ,EAAYQ,aACZD,KAAKE,SAAS,CAACL,SAAS,IAG1BG,KAAKE,SAAS,CAACL,SAAS,IACxB,IAAMM,EAAK,IAAIC,IACXC,EAAkC,GAEhCC,EAAiBC,OAAOC,UAAUC,UAAUC,SAAS,UACzD,8BAAgC,8BAGlCC,IAAUC,WAAWT,EAAIG,GAAgBO,MAAK,SAAUD,GACtD,IAAME,EAAkB,SAACC,GACvBC,QAAQC,IAAR,0BAA+BF,EAAOG,cACtCzB,EAAa,IAAI0B,IAAWC,QAAO,SAASC,GAE1C,GAAmB,YAAfA,EAAMC,KAAoB,CAE5B,IAAIC,EAAe,IACnB,OAAOF,EAAMG,SACX,KAAK,EACHD,EAAOF,EAAMI,SA1D7B,WACE,IACIC,EADyBC,SAASC,eAAe,kBACSC,MAC9D,OAAOC,OAAOJ,GAuDwBK,GACxB,MACF,KAAK,EACHR,EAAOF,EAAMI,SAvD7B,WACE,IACIO,EADsBL,SAASC,eAAe,eACMC,MACxD,OAAOC,OAAOE,GAoDwBC,GACxB,MACF,KAAK,EACHV,EAAOF,EAAMI,SApD7B,WACE,IACIS,EADuBP,SAASC,eAAe,gBACOC,MAC1D,OAAOC,OAAOI,GAiDwBC,GACxB,MACF,KAAK,EACHZ,EAAOF,EAAMI,SAjD7B,WACE,IACIW,EADsBT,SAASC,eAAe,eACMC,MAExD,OADAb,QAAQC,IAAImB,GACLN,OAAOM,GA6CwBC,GAI5B,IAAMC,EAAO1B,EAAW2B,KAAKlB,EAAMmB,SAAUrC,EAAGsC,YAAa,CAAClB,SAC1DlB,EAAMgB,EAAMG,UACdnB,EAAMgB,EAAMG,SAASkB,OAEvBrC,EAAMgB,EAAMG,SAAWc,MAEC,aAAfjB,EAAMC,MACXjB,EAAMgB,EAAMG,WACdnB,EAAMgB,EAAMG,SAASkB,cACdrC,EAAMgB,EAAMG,cASdV,gBAAgBC,GAC3BtB,EAAW8C,QAGbvB,QAAQC,IAAR,qBACA0B,MAAM,yBACH9B,MAAK,SAAA+B,GAAQ,OAAIA,EAASC,iBAC1BhC,MAAK,SAAAE,GAAM,OAAID,EAAgBC,WAvExC,oBA4EE,WACE,OACI,qCACE,wBAAQ+B,QAAS9C,KAAKF,MAAtB,SACGE,KAAKJ,MAAMC,QAAU,aAAe,cAIrC,6CACA,uBAAOkD,KAAO,QAAQC,GAAK,iBAAiBC,aAAc,GAAIC,IAAO,EAAGC,IAAO,MAC/E,0CACA,uBAAOJ,KAAO,QAAQC,GAAK,cAAcC,aAAc,GAAIC,IAAO,EAAGC,IAAO,MAC5E,2CACA,uBAAOJ,KAAO,QAAQC,GAAK,eAAeC,aAAc,GAAIC,IAAO,EAAGC,IAAO,MAC7E,0CACA,uBAAOJ,KAAO,QAAQC,GAAK,cAAcC,aAAc,GAAIC,IAAO,EAAGC,IAAO,aA3FxF,GAA8BC,IAAMC,WCzBrBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCMOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.6207558e.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n}\n\nlet midiPlayer: MidiPlayer.Player;\n\nfunction getSopranoValue(): number {\n  const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n  let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n  return Number(sopranoValue);\n}\n\nfunction getAltoValue(): number {\n  const altoSliderElement = document.getElementById(\"alto-slider\");\n  let altoValue = (altoSliderElement as HTMLInputElement).value;\n  return Number(altoValue);\n}\n\nfunction getTenorValue(): number {\n  const tenorSliderElement = document.getElementById(\"tenor-slider\");\n  let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n  return Number(tenorValue);\n}\n\nfunction getBassValue(): number {\n  const bassSliderElement = document.getElementById(\"bass-slider\");\n  let bassValue = (bassSliderElement as HTMLInputElement).value;\n  console.log(bassValue);\n  return Number(bassValue);\n}\n\nexport class MidiTest extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      playing: false\n    };\n    this._play = this._play.bind(this);\n  }\n\n  private _play(): undefined {\n    if (this.state.playing) {\n      midiPlayer!.pause();\n      this.setState({playing: false});\n      return undefined;\n    }\n    this.setState({playing: true});\n    const ac = new AudioContext();\n    let nodes: {[channel: number]: any} = {};\n\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n      'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n\n    // @ts-ignore\n    SoundFont.instrument(ac, instrumentName).then(function (instrument) {\n      const loadArrayBuffer = (buffer: ArrayBuffer) => {\n        console.log(`loadArrayBuffer ${buffer.byteLength}`);\n        midiPlayer = new MidiPlayer.Player(function(event: any) {\n          //console.log(event.channel);\n          if (event.name === 'Note on') {\n\n            let gain: number = 100;\n            switch(event.channel) {\n              case 1:\n                gain = event.velocity / getSopranoValue();\n                break;\n              case 2:\n                gain = event.velocity / getAltoValue();\n                break;\n              case 3:\n                gain = event.velocity / getTenorValue();\n                break;\n              case 4:\n                gain = event.velocity / getBassValue();\n                break;\n            }\n\n            const node = instrument.play(event.noteName, ac.currentTime, {gain});\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n            }\n            nodes[event.channel] = node;\n            //document.querySelector('#track-' + event.track + ' code').innerHTML = JSON.stringify(event);\n          } else if (event.name === 'Note off') {\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n              delete nodes[event.channel];\n            }\n          }\n\n          // document.getElementById('tempo-display').innerHTML = Player.tempo;\n          // document.getElementById('file-format-display').innerHTML = Player.format;\n          // document.getElementById('play-bar').style.width = 100 - Player.getSongPercentRemaining() + '%';\n        });\n\n        midiPlayer.loadArrayBuffer(buffer);\n        midiPlayer.play();\n      }\n\n      console.log(`instrument loaded`);\n      fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n    });\n    return undefined;\n  }\n\n  render() {\n    return (\n        <>\n          <button onClick={this._play}>\n            {this.state.playing ? \"Pause Song\" : \"Play Song\"}\n          </button>\n\n\n            <label>Soprano:</label>\n            <input type = \"range\" id = \"soprano-slider\" defaultValue={25} min = {1} max = {100}></input>\n            <label>Alto:</label>\n            <input type = \"range\" id = \"alto-slider\" defaultValue={25} min = {1} max = {100}></input>\n            <label>Tenor:</label>\n            <input type = \"range\" id = \"tenor-slider\" defaultValue={25} min = {1} max = {100}></input>\n            <label>Bass:</label>\n            <input type = \"range\" id = \"bass-slider\" defaultValue={25} min = {1} max = {100}></input>\n\n\n        </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport {MidiTest} from \"./MidiTest\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MidiTest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}