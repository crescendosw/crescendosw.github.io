{"version":3,"sources":["MidiTest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MidiTest","props","initialTempo","initialTime","songLength","instrument","interval","nodes","ac","AudioContext","midiPlayer","state","playing","instrumentIsLoaded","experiencingUserInputOnTimeSlider","_play","bind","_getTempoValue","_setNewTime","_setNewTempo","_displayTempo","_getButtonText","_displayTime","_getTimeValue","_handleEvent","_instrumentLoaded","MidiPlayer","Player","instrumentName","window","navigator","userAgent","includes","console","log","SoundFont","then","secondsElapsed","seconds","minutes","Math","trunc","toString","Number","newTempo","this","tempoSliderElement","document","getElementById","value","setState","timeSliderElement","isPlaying","skipToPercent","play","timeOutputElement","secondsSelected","innerHTML","setTempo","round","abs","getSongPercentRemaining","currentTime","_getCurrentPercent","event","gain","name","channel","velocity","_getSopranoValue","_getAltoValue","_getTenorValue","_getBassValue","node","noteName","stop","pause","fetch","response","arrayBuffer","buffer","loadArrayBuffer","getTempo","getSongTime","id","type","defaultValue","min","max","step","onInput","onMouseUp","onClick","setInterval","_getTimeOutput","clearInterval","sopranoValue","altoValue","tenorValue","bassValue","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f496260a.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont, {Player} from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: string;\n  initialTime: string;\n  songLength: number;\n  instrumentIsLoaded: boolean;\n  experiencingUserInputOnTimeSlider: boolean;\n}\n\nexport class MidiTest extends React.Component<Props, State> {\n  initialTempo: string | undefined;\n  initialTime: string | undefined;\n  songLength: number | undefined;\n  instrument: Player | undefined;\n  interval: number | undefined;\n  nodes: { [channel: number]: any } = {};\n  ac = new AudioContext();\n\n  midiPlayer: MidiPlayer.Player;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: \"LOADING\",\n      initialTime: \"0:00\",\n      songLength: 0,\n      instrumentIsLoaded: false,\n      experiencingUserInputOnTimeSlider: false,\n    };\n\n    this._play = this._play.bind(this);\n    this._getTempoValue = this._getTempoValue.bind(this);\n    this._setNewTime = this._setNewTime.bind(this);\n    this._setNewTempo = this._setNewTempo.bind(this);\n    this._displayTempo = this._displayTempo.bind(this);\n    this._getButtonText = this._getButtonText.bind(this);\n    this._displayTime = this._displayTime.bind(this);\n    this._getTimeValue = this._getTimeValue.bind(this);\n    this._handleEvent = this._handleEvent.bind(this);\n    this._instrumentLoaded = this._instrumentLoaded.bind(this);\n\n    this.midiPlayer = new MidiPlayer.Player(this._handleEvent);\n\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n\n    if(this.ac) {\n      console.log(\"we have ac\");\n    }\n    else {\n      console.log(\"no ac\");\n    }\n    //@ts-ignore\n    SoundFont.instrument(this.ac, instrumentName).then(this._instrumentLoaded);\n  }\n\n  private static _getSopranoValue(): number {\n    const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n    let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n    return Number(sopranoValue);\n  }\n\n  private static _getAltoValue(): number {\n    const altoSliderElement = document.getElementById(\"alto-slider\");\n    let altoValue = (altoSliderElement as HTMLInputElement).value;\n    return Number(altoValue);\n  }\n\n  private static _getTenorValue(): number {\n    const tenorSliderElement = document.getElementById(\"tenor-slider\");\n    let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n    return Number(tenorValue);\n  }\n\n  private static _getBassValue(): number {\n    const bassSliderElement = document.getElementById(\"bass-slider\");\n    let bassValue = (bassSliderElement as HTMLInputElement).value;\n    return Number(bassValue);\n  }\n\n  private _getTimeValue(secondsElapsed: number): string {\n    let seconds: string;\n    let minutes: number = 0;\n\n    if (secondsElapsed < 10) {\n      seconds = \"0\" + Math.trunc(secondsElapsed);\n    }\n    else {\n      if (secondsElapsed < 60) {\n        minutes = 0;\n        seconds = (Math.trunc(secondsElapsed)).toString();\n      }\n      else if (secondsElapsed % 60 === 0) {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = \"00\";\n      }\n      else {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = (secondsElapsed % 60).toString();\n      }\n    }\n    return minutes + \":\" + seconds;\n  }\n\n  private _getTempoValue(): number {\n    let newTempo: number = Number(this.state.initialTempo)\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n\n    if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n          0.25))\n    }\n    else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n    }\n    return newTempo;\n  }\n\n  private _setNewTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: false});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n\n    if (this.midiPlayer.isPlaying()) {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n      this.midiPlayer.play();\n    }\n    else {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n    }\n  }\n\n  private _displayTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: true});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n    let secondsSelected = ((Number((timeSliderElement as HTMLInputElement).value) / 100) * this.state.songLength);\n\n    (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeValue(secondsSelected);\n  }\n\n  private _setNewTempo(): void {\n    this.midiPlayer.setTempo(this._getTempoValue());\n  }\n\n  private _displayTempo(): void {\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    (tempoOutputElement as HTMLInputElement).innerHTML = (Math.round(this._getTempoValue())).toString();\n  }\n\n  private _getButtonText(): string {\n    if (!this.state.instrumentIsLoaded) {\n      return \"loading\";\n    }\n    else {\n      if (this.midiPlayer.isPlaying()) {\n        return \"pause\";\n      }\n      else {\n        return \"play\";\n      }\n    }\n  }\n\n  private _getCurrentPercent(): number {\n    return Math.abs(100 - this.midiPlayer.getSongPercentRemaining());\n  }\n\n  private _getTimeOutput(): string {\n    let currentTime = (this._getCurrentPercent() / 100) * this.state.songLength;\n\n    if (this.state.instrumentIsLoaded) {\n      return this._getTimeValue(currentTime);\n    }\n    else {\n      return \"LOADING\"\n    }\n  }\n\n  private _handleEvent(event: any): void {\n    let gain: number = 100;\n\n    if (event.name === 'Note on') {\n\n      switch (event.channel) {\n        case 1:\n          gain = event.velocity * (MidiTest._getSopranoValue() / 10);\n          break;\n        case 2:\n          gain = event.velocity * (MidiTest._getAltoValue() / 10);\n          break;\n        case 3:\n          gain = event.velocity * (MidiTest._getTenorValue() / 10);\n          break;\n        case 4:\n          gain = event.velocity * (MidiTest._getBassValue() / 10);\n          break;\n      }\n\n      const node = this.instrument!.play(event.noteName, this.ac.currentTime, {gain}); //changed ? to !\n\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n      }\n\n      this.nodes[event.channel] = node;\n\n    }\n    else if (event.name === 'Note off') {\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n        delete this.nodes[event.channel];\n      }\n    }\n  }\n\n  private _play(): undefined {\n    if (this.state.instrumentIsLoaded) {\n      if (this.state.playing) {   //if playing, stop\n        this.midiPlayer!.pause();\n        this.setState({playing: false});\n        return undefined;\n      }\n      this.setState({playing: true});   //start playing\n      this.midiPlayer.play();\n      return undefined;\n    }\n  }\n\n  private _instrumentLoaded(instrument: Player) {\n    this.setState({instrumentIsLoaded: true});\n    this.instrument = instrument;\n\n    const loadArrayBuffer = (buffer: ArrayBuffer) => {\n      this.midiPlayer.loadArrayBuffer(buffer);\n      this.setState({initialTempo: this.midiPlayer.getTempo().toString()});\n      this.setState({songLength: this.midiPlayer.getSongTime()});\n      this.setState({initialTime: \"0:00\"});\n    }\n\n    fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n  }\n\n  render() {\n    return (\n        <>\n          <form id=\"slider-form\">\n            <label>Soprano:</label>\n            <input type=\"range\" id=\"soprano-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Alto:</label>\n            <input type=\"range\" id=\"alto-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Tenor:</label>\n            <input type=\"range\" id=\"tenor-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Bass:</label>\n            <input type=\"range\" id=\"bass-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Tempo:</label>\n            <input type=\"range\" id=\"tempo-slider\" defaultValue={0.5} min={0} max={1} step={0.01}\n                   onInput={this._displayTempo} onMouseUp={this._setNewTempo}/><br/>\n          </form>\n\n          <label>Tempo: </label>\n          <output id=\"tempo-output\">{this.state.initialTempo}</output>\n\n          <div id=\"bottom-div\">\n            <div id=\"time-slider-and-output-div\">\n              <output id=\"time-output\">{this.state.initialTime}</output>\n              <input type=\"range\" id=\"time-slider\" onInput={this._displayTime} onMouseUp={this._setNewTime}\n                     defaultValue={0} min={0} max={100} step={0.01}/><br/>\n            </div>\n\n            <button id=\"play-button\" onClick={this._play}>{this._getButtonText()}</button>\n          </div>\n        </>\n    );\n  }\n\n  componentDidMount() {\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n\n    this.interval = window.setInterval(() => {\n      if (this.state.instrumentIsLoaded) {\n        if (this.midiPlayer.isPlaying()) {\n          if (!this.state.experiencingUserInputOnTimeSlider) {\n            (timeSliderElement as HTMLOutputElement).value = this._getCurrentPercent().toString();\n            (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeOutput();\n          }\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n}","import React from 'react';\nimport './App.css';\nimport {MidiTest} from \"./MidiTest\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MidiTest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}