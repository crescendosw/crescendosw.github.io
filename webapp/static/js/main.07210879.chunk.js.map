{"version":3,"sources":["MidiPlaybackEnvironment.tsx","index.tsx","App.tsx"],"names":["MidiPlaybackEnvironment","props","initialTempo","initialTime","songLength","instrument","interval","nodes","audioContext","midiPlayer","state","playing","instrumentIsLoaded","experiencingUserInputOnTimeSlider","_handleEvent","bind","_instrumentLoaded","_play","_loadMidiFile","_getTempoValue","_setNewTime","_setNewTempo","_displayTempo","_getButtonText","_displayTime","_getTimeValue","MidiPlayer","Player","AudioContext","instrumentName","window","navigator","userAgent","includes","SoundFont","then","secondsElapsed","seconds","minutes","Math","trunc","toString","Number","newTempo","this","tempoSliderElement","document","getElementById","value","setState","timeSliderElement","isPlaying","skipToPercent","play","timeOutputElement","secondsSelected","innerHTML","setTempo","round","abs","getSongPercentRemaining","currentTime","_getCurrentPercent","event","gain","name","channel","velocity","_getSopranoValue","_getAltoValue","_getTenorValue","_getBassValue","node","noteName","stop","pause","fetch","response","arrayBuffer","buffer","loadArrayBuffer","getTempo","getSongTime","id","type","defaultValue","min","max","step","onInput","onMouseUp","onTouchEnd","onClick","setInterval","_getTimeOutput","clearInterval","sopranoValue","altoValue","tenorValue","bassValue","React","Component","ReactDOM","render","exact","path","component","to"],"mappings":"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","file":"static/js/main.07210879.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont, {Player} from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: string;\n  initialTime: string;\n  songLength: number;\n  instrumentIsLoaded: boolean;\n  experiencingUserInputOnTimeSlider: boolean;\n}\n\nexport class MidiPlaybackEnvironment extends React.Component<Props, State> {\n  initialTempo: string | undefined;\n  initialTime: string | undefined;\n  songLength: number | undefined;\n  instrument: Player | undefined;\n  interval: number | undefined;\n  nodes: { [channel: number]: any } = {};\n  audioContext: AudioContext | undefined;\n  midiPlayer: MidiPlayer.Player;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: \"LOADING\",\n      initialTime: \"0:00\",\n      songLength: 0,\n      instrumentIsLoaded: false,\n      experiencingUserInputOnTimeSlider: false,\n    };\n\n    this._handleEvent = this._handleEvent.bind(this);\n    this._instrumentLoaded = this._instrumentLoaded.bind(this);\n    this._play = this._play.bind(this);\n    this._loadMidiFile = this._loadMidiFile.bind(this);\n    this._getTempoValue = this._getTempoValue.bind(this);\n    this._setNewTime = this._setNewTime.bind(this);\n    this._setNewTempo = this._setNewTempo.bind(this);\n    this._displayTempo = this._displayTempo.bind(this);\n    this._getButtonText = this._getButtonText.bind(this);\n    this._displayTime = this._displayTime.bind(this);\n    this._getTimeValue = this._getTimeValue.bind(this);\n    this.midiPlayer = new MidiPlayer.Player(this._handleEvent);\n\n    this.audioContext = new AudioContext();\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n    //@ts-ignore\n    SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n  }\n\n  private static _getSopranoValue(): number {\n    const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n    let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n    return Number(sopranoValue);\n  }\n\n  private static _getAltoValue(): number {\n    const altoSliderElement = document.getElementById(\"alto-slider\");\n    let altoValue = (altoSliderElement as HTMLInputElement).value;\n    return Number(altoValue);\n  }\n\n  private static _getTenorValue(): number {\n    const tenorSliderElement = document.getElementById(\"tenor-slider\");\n    let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n    return Number(tenorValue);\n  }\n\n  private static _getBassValue(): number {\n    const bassSliderElement = document.getElementById(\"bass-slider\");\n    let bassValue = (bassSliderElement as HTMLInputElement).value;\n    return Number(bassValue);\n  }\n\n  private _getTimeValue(secondsElapsed: number): string {\n    let seconds: string;\n    let minutes: number = 0;\n\n    if (secondsElapsed < 10) {\n      seconds = \"0\" + Math.trunc(secondsElapsed);\n    }\n    else {\n      if (secondsElapsed < 60) {\n        minutes = 0;\n        seconds = (Math.trunc(secondsElapsed)).toString();\n      }\n      else if (secondsElapsed % 60 === 0) {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = \"00\";\n      }\n      else {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = (secondsElapsed % 60).toString();\n      }\n    }\n    return minutes + \":\" + seconds;\n  }\n\n  private _getTempoValue(): number {\n    let newTempo: number = Number(this.state.initialTempo)\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n\n    if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n          0.25))\n    }\n    else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n    }\n    return newTempo;\n  }\n\n  private _setNewTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: false});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n\n    if (this.midiPlayer.isPlaying()) {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n      this.midiPlayer.play();\n    }\n    else {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n    }\n  }\n\n  private _displayTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: true});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n    let secondsSelected = ((Number((timeSliderElement as HTMLInputElement).value) / 100) * this.state.songLength);\n\n    (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeValue(secondsSelected);\n  }\n\n  private _setNewTempo(): void {\n    this.midiPlayer.setTempo(this._getTempoValue());\n  }\n\n  private _displayTempo(): void {\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    (tempoOutputElement as HTMLInputElement).innerHTML = (Math.round(this._getTempoValue())).toString();\n  }\n\n  private _getButtonText(): string {\n    if (!this.state.instrumentIsLoaded) {\n      return \"loading\";\n    }\n    else {\n      if (this.midiPlayer.isPlaying()) {\n        return \"pause\";\n      }\n      else {\n        return \"play\";\n      }\n    }\n  }\n\n  private _getCurrentPercent(): number {\n    return Math.abs(100 - this.midiPlayer.getSongPercentRemaining());\n  }\n\n  private _getTimeOutput(): string {\n    let currentTime = (this._getCurrentPercent() / 100) * this.state.songLength;\n\n    if (this.state.instrumentIsLoaded) {\n      return this._getTimeValue(currentTime);\n    }\n    else {\n      return \"LOADING\"\n    }\n  }\n\n  private _handleEvent(event: any): void {\n    let gain: number = 100;\n\n    if (event.name === 'Note on') {\n\n      switch (event.channel) {\n        case 1:\n          gain = event.velocity * (MidiPlaybackEnvironment._getSopranoValue() / 10);\n          break;\n        case 2:\n          gain = event.velocity * (MidiPlaybackEnvironment._getAltoValue() / 10);\n          break;\n        case 3:\n          gain = event.velocity * (MidiPlaybackEnvironment._getTenorValue() / 10);\n          break;\n        case 4:\n          gain = event.velocity * (MidiPlaybackEnvironment._getBassValue() / 10);\n          break;\n      }\n\n      const node = this.instrument!.play(event.noteName, this.audioContext!.currentTime, {gain}); //changed ? to !\n\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n      }\n\n      this.nodes[event.channel] = node;\n\n    }\n    else if (event.name === 'Note off') {\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n        delete this.nodes[event.channel];\n      }\n    }\n  }\n\n  private _loadMidiFile(): void {\n    if (!this.audioContext) {\n      this.audioContext = new AudioContext();\n      const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n      //@ts-ignore\n      SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n    }\n  }\n\n  private _play(): undefined {\n    if (this.state.instrumentIsLoaded) {\n      if (this.state.playing) {   //if playing, stop\n        this.midiPlayer!.pause();\n        this.setState({playing: false});\n        return undefined;\n      }\n      this.setState({playing: true});   //start playing\n      this.midiPlayer.play();\n      return undefined;\n    }\n  }\n\n  private _instrumentLoaded(instrument: Player) {\n    this.setState({instrumentIsLoaded: true});\n    this.instrument = instrument;\n\n    const loadArrayBuffer = (buffer: ArrayBuffer) => {\n      this.midiPlayer.loadArrayBuffer(buffer);\n      this.setState({initialTempo: this.midiPlayer.getTempo().toString()});\n      this.setState({songLength: this.midiPlayer.getSongTime()});\n      this.setState({initialTime: \"0:00\"});\n    }\n\n    fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n  }\n\n  render() {\n    return (\n        <>\n          <form id=\"slider-form\">\n            <label>Soprano:</label>\n            <input type=\"range\" id=\"soprano-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Alto:</label>\n            <input type=\"range\" id=\"alto-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Tenor:</label>\n            <input type=\"range\" id=\"tenor-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Bass:</label>\n            <input type=\"range\" id=\"bass-slider\" defaultValue={1} min={0} max={2} step={0.01}/><br/>\n            <label>Tempo:</label>\n            <input type=\"range\" id=\"tempo-slider\" defaultValue={0.5} min={0} max={1} step={0.01}\n                   onInput={this._displayTempo} onMouseUp={this._setNewTempo} onTouchEnd={this._setNewTempo}/><br/>\n          </form>\n\n          <label>Tempo: </label>\n          <output id=\"tempo-output\">{this.state.initialTempo}</output>\n\n          <div id=\"bottom-div\">\n            <div id=\"time-slider-and-output-div\">\n              <output id=\"time-output\">{this.state.initialTime}</output>\n              <input type=\"range\" id=\"time-slider\" onInput={this._displayTime} onMouseUp={this._setNewTime}\n                     onTouchEnd={this._setNewTime} defaultValue={0} min={0} max={100} step={0.01}/><br/>\n            </div>\n\n            <button id=\"play-button\" onClick={this._play}>{this._getButtonText()}</button>\n          </div>\n        </>\n    );\n  }\n\n  componentDidMount() {\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n\n    this.interval = window.setInterval(() => {\n      if (this.state.instrumentIsLoaded) {\n        if (this.midiPlayer.isPlaying()) {\n          if (!this.state.experiencingUserInputOnTimeSlider) {\n            (timeSliderElement as HTMLOutputElement).value = this._getCurrentPercent().toString();\n            (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeOutput();\n          }\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {Homepage, Songs, Playlist, Player } from './App';\n\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={Homepage}/>\n            <Route exact path=\"/Songs\" component={Songs}/>\n            <Route exact path=\"/Playlist\" component={Playlist}/>\n            <Route exact path = \"/Player\" component = {Player}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {MidiPlaybackEnvironment} from \"./MidiPlaybackEnvironment\";\n\nconst Homepage = () => {\n    return (\n        <div>\n            <h1>Homepage </h1>\n            <p>This will be the home page for our app</p>\n            <p>Here will be several things the user can click on; Songs, Settings, Favorites, This Week, Etc.</p>\n            <Link to='/Songs'>Go To Songs</Link>\n        </div>\n    )\n};\n\nconst Songs = () => {\n    return (\n        <div>\n            <h1>Songs</h1>\n            <p>This will be a list of hymnals and playlists we support</p>\n            <p>The user will be able to select a hymnal or playlist, bringing them to a list of songs included in that hymnal\n                or playlist</p>\n            <Link to='/Playlist'>Go to Playlist</Link>\n        </div>\n    )\n};\n\nconst Playlist = () => {\n    return (\n        <div>\n            <h1>Playlist</h1>\n            <p>This will be a long list of songs in the selected playlist</p>\n            <p>The user will be able to select a song, bringing them to the player for that song</p>\n            <Link to='/Player'>Go to Player</Link>\n        </div>\n    )\n};\n\nconst Player = () => {\n    return (\n        <MidiPlaybackEnvironment/>\n    )\n};\n\nexport {Homepage, Songs, Playlist, Player } ;"],"sourceRoot":""}