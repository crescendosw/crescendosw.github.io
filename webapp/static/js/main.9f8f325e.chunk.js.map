{"version":3,"sources":["MidiTest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["midiPlayer","MidiTest","props","initialTempo","songLength","state","playing","_play","bind","this","pause","setState","ac","AudioContext","nodes","instrumentName","window","navigator","userAgent","includes","SoundFont","instrument","then","loadArrayBuffer","buffer","tempo","length","console","log","byteLength","MidiPlayer","Player","event","gain","name","channel","velocity","sopranoValue","document","getElementById","value","Number","getSopranoValue","altoValue","getAltoValue","tenorValue","getTenorValue","bassValue","getBassValue","node","play","noteName","currentTime","stop","getTempo","getSongTime","fetch","response","arrayBuffer","id","type","className","defaultValue","min","max","step","onClick","newTempo","realThis","tempoSliderElement","tempoOutputElement","timeSliderElement","timeOutputElement","addEventListener","innerHTML","Math","round","toString","setTempo","skipToPercent","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sJAcIA,E,0HA0BG,IAAMC,EAAb,kDAIE,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAJRC,kBAG0B,IAF1BC,gBAE0B,EAGxB,EAAKC,MAAQ,CACXC,SAAS,EACTH,aAAc,EACdC,WAAY,GAGd,EAAKG,MAAQ,EAAKA,MAAMC,KAAX,gBATW,EAJ5B,yCAgBE,WAA4B,IAAD,OACzB,GAAIC,KAAKJ,MAAMC,QAGb,OAFAN,EAAYU,aACZD,KAAKE,SAAS,CAACL,SAAS,IAG1BG,KAAKE,SAAS,CAACL,SAAS,IACxB,IAAMM,EAAK,IAAIC,IACXC,EAAkC,GAEhCC,EAAiBC,OAAOC,UAAUC,UAAUC,SAAS,UACzD,8BAAgC,8BAWlCC,IAAUC,WAAWT,EAAIG,GAAgBO,MAAK,SAACD,GAC7C,IAAME,EAAkB,SAACC,GAVH,IAACC,EAIFC,EAOnBC,QAAQC,IAAR,0BAA+BJ,EAAOK,cAEtC7B,EAAa,IAAI8B,IAAWC,QAAO,SAACC,GAElC,IAAIC,EAAe,IAEnB,GAAmB,YAAfD,EAAME,KAAoB,CAE5B,OAAOF,EAAMG,SACX,KAAK,EACHF,EAAOD,EAAMI,UA1E7B,WACE,IACIC,EADyBC,SAASC,eAAe,kBACSC,MAC9D,OAAOC,OAAOJ,GAuEyBK,GAAoB,IAC7C,MACF,KAAK,EACHT,EAAOD,EAAMI,UAvE7B,WACE,IACIO,EADsBL,SAASC,eAAe,eACMC,MACxD,OAAOC,OAAOE,GAoEyBC,GAAiB,IAC1C,MACF,KAAK,EACHX,EAAOD,EAAMI,UApE7B,WACE,IACIS,EADuBP,SAASC,eAAe,gBACOC,MAC1D,OAAOC,OAAOI,GAiEyBC,GAAkB,IAC3C,MACF,KAAK,EACHb,EAAOD,EAAMI,UAjE7B,WACE,IACIW,EADsBT,SAASC,eAAe,eACMC,MACxD,OAAOC,OAAOM,GA8DyBC,GAAiB,IAI9C,IAAMC,EAAO5B,EAAW6B,KAAKlB,EAAMmB,SAAUvC,EAAGwC,YAAa,CAACnB,SAE1DnB,EAAMkB,EAAMG,UACdrB,EAAMkB,EAAMG,SAASkB,OAEvBvC,EAAMkB,EAAMG,SAAWc,MAGD,aAAfjB,EAAME,MACTpB,EAAMkB,EAAMG,WACdrB,EAAMkB,EAAMG,SAASkB,cACdvC,EAAMkB,EAAMG,cASdZ,gBAAgBC,GAtDNC,EAuDLzB,EAAWsD,WAtD7B,EAAK3C,SAAS,CAACR,aAAcsB,IAGRC,EAoDL1B,EAAWuD,cAnD3B,EAAK5C,SAAS,CAACP,WAAYsB,IAoDzB1B,EAAWkD,QAGbvB,QAAQC,IAAR,qBACA4B,MAAM,yBACHlC,MAAK,SAAAmC,GAAQ,OAAIA,EAASC,iBAC1BpC,MAAK,SAAAE,GAAM,OAAID,EAAgBC,WA5FxC,oBAiGE,WACE,OACI,qCACI,uBAAMmC,GAAK,cAAX,UACE,6CACA,uBAAOC,KAAO,QAAQD,GAAK,iBAAiBE,UAAY,UAAUC,aAAc,EAAGC,IAAO,EAAGC,IAAO,EAAGC,KAAQ,MAAO,uBACtH,0CACA,uBAAOL,KAAO,QAAQD,GAAK,cAAcE,UAAY,UAAUC,aAAc,EAAGC,IAAO,EAAGC,IAAO,EAAGC,KAAQ,MAAO,uBACnH,2CACA,uBAAOL,KAAO,QAAQD,GAAK,eAAeE,UAAY,UAAUC,aAAc,EAAGC,IAAO,EAAGC,IAAO,EAAGC,KAAQ,MAAO,uBACpH,0CACA,uBAAOL,KAAO,QAAQD,GAAK,cAAcE,UAAY,UAAUC,aAAc,EAAGC,IAAO,EAAGC,IAAO,EAAGC,KAAQ,MAAO,uBACnH,2CACA,uBAAOL,KAAO,QAAQD,GAAK,eAAeG,aAAgB,GAAKC,IAAO,EAAGC,IAAO,EAAGC,KAAQ,MAAO,0BAGtG,6CACA,wBAAQN,GAAK,eAAb,SAA6BlD,KAAKJ,MAAMF,eACxC,4CACA,wBAAQwD,GAAK,kBAAb,eAGA,sBAAKA,GAAK,aAAV,UACE,uBAAOC,KAAO,QAAQD,GAAK,kBAAkBG,aAAgB,EAAGC,IAAO,EAAGC,IACrEvD,KAAKJ,MAAMD,WAAY6D,KAAQ,MAAO,uBAE3C,wBAAQN,GAAK,cAAcO,QAAWzD,KAAKF,MAA3C,SACGE,KAAKJ,MAAMC,QAAU,QAAU,iBA5H9C,+BAmIE,WAA2B,IASrB6D,EADEC,EARkB,KAUlBC,EAAqB/B,SAASC,eAAe,gBAC7C+B,EAAqBhC,SAASC,eAAe,gBAC7CgC,EAAoBjC,SAASC,eAAe,mBAC5CiC,EAAoBlC,SAASC,eAAe,mBAEjD8B,EAAwCI,iBAAiB,SAAS,WAC7DhC,OAAQ4B,EAAwC7B,OAAS,GAC3D2B,EAAYC,EAAS/D,MAAMF,cAAiB,IAAMsC,OAAQ4B,EAAwC7B,OAC9F,KAE8D,KAA3DC,OAAQ4B,EAAwC7B,OACvD2B,EAAWC,EAAS/D,MAAMF,aAEnBsC,OAAQ4B,EAAwC7B,OAAS,KAChE2B,EAAYC,EAAS/D,MAAMF,cAAiB,EAAIsC,OAAQ4B,EAAwC7B,OAAU,IAG3G8B,EAAwCI,UAAYC,KAAKC,MAAMT,GAAUU,WAEzER,EAAwCI,iBAAiB,WAAW,WACnEzE,EAAW8E,SAASX,SAIvBI,EAAuCE,iBAAiB,SAAS,WAC/DD,EAAuCE,UACnCH,EAAuC/B,MAAMqC,WAEjDN,EAAuCE,iBAAiB,WAAW,WAClEzE,EAAW+E,cAAetC,OAAQ8B,EAAuC/B,OAClExC,EAAWuD,yBA3K1B,GAA8ByB,IAAMC,WC1BrBC,MAVf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCMOsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvD,SAASC,eAAe,SAO1B4C,M","file":"static/js/main.9f8f325e.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: number;\n  songLength: number;\n}\n\nlet midiPlayer: MidiPlayer.Player;\n\nfunction getSopranoValue(): number {\n  const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n  let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n  return Number(sopranoValue);\n}\n\nfunction getAltoValue(): number {\n  const altoSliderElement = document.getElementById(\"alto-slider\");\n  let altoValue = (altoSliderElement as HTMLInputElement).value;\n  return Number(altoValue);\n}\n\nfunction getTenorValue(): number {\n  const tenorSliderElement = document.getElementById(\"tenor-slider\");\n  let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n  return Number(tenorValue);\n}\n\nfunction getBassValue(): number {\n  const bassSliderElement = document.getElementById(\"bass-slider\");\n  let bassValue = (bassSliderElement as HTMLInputElement).value;\n  return Number(bassValue);\n}\n\nexport class MidiTest extends React.Component<Props, State> {\n  initialTempo: number | undefined;\n  songLength: number | undefined;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: 0,\n      songLength: 0,\n    };\n\n    this._play = this._play.bind(this);\n  }\n\n  private _play(): undefined {\n    if (this.state.playing) {   //if playing, stop\n      midiPlayer!.pause();\n      this.setState({playing: false});\n      return undefined;\n    }\n    this.setState({playing: true});   //start playing\n    const ac = new AudioContext();\n    let nodes: {[channel: number]: any} = {};\n\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n      'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n\n    const setInitialTempo = (tempo: number) => {\n      this.setState({initialTempo: tempo});\n    };\n\n    const setSongLength = (length: number) => {\n      this.setState({songLength: length});\n    };\n\n    // @ts-ignore\n    SoundFont.instrument(ac, instrumentName).then((instrument) => {\n      const loadArrayBuffer = (buffer: ArrayBuffer) => {\n        console.log(`loadArrayBuffer ${buffer.byteLength}`);\n\n        midiPlayer = new MidiPlayer.Player((event: any) => {\n\n          let gain: number = 100;\n\n          if (event.name === 'Note on') {\n\n            switch(event.channel) {\n              case 1:\n                gain = event.velocity * (getSopranoValue() / 10);\n                break;\n              case 2:\n                gain = event.velocity * (getAltoValue() / 10);\n                break;\n              case 3:\n                gain = event.velocity * (getTenorValue() / 10);\n                break;\n              case 4:\n                gain = event.velocity * (getBassValue() / 10);\n                break;\n            }\n\n            const node = instrument.play(event.noteName, ac.currentTime, {gain});\n\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n            }\n            nodes[event.channel] = node;\n            //document.querySelector('#track-' + event.track + ' code').innerHTML = JSON.stringify(event);\n          }\n          else if (event.name === 'Note off') {\n            if (nodes[event.channel]) {\n              nodes[event.channel].stop();\n              delete nodes[event.channel];\n            }\n          }\n\n          // document.getElementById('tempo-display').innerHTML = Player.tempo;\n          // document.getElementById('file-format-display').innerHTML = Player.format;\n          // document.getElementById('play-bar').style.width = 100 - Player.getSongPercentRemaining() + '%';\n        });\n\n        midiPlayer.loadArrayBuffer(buffer);\n        setInitialTempo(midiPlayer.getTempo());\n        setSongLength(midiPlayer.getSongTime());\n        midiPlayer.play();\n      }\n\n      console.log(`instrument loaded`);\n      fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n    });\n    return undefined;\n  }\n\n  render() {\n    return (\n        <>\n            <form id = \"slider-form\">\n              <label>Soprano:</label>\n              <input type = \"range\" id = \"soprano-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n              <label>Alto:</label>\n              <input type = \"range\" id = \"alto-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n              <label>Tenor:</label>\n              <input type = \"range\" id = \"tenor-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n              <label>Bass:</label>\n              <input type = \"range\" id = \"bass-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n              <label>Tempo:</label>\n              <input type = \"range\" id = \"tempo-slider\" defaultValue = {0.5} min = {0} max = {1} step = {0.01}/><br/>\n            </form>\n\n          <output>Tempo: </output>\n          <output id = \"tempo-output\">{this.state.initialTempo}</output>\n          <output>Time: </output>\n          <output id = \"duration-output\">0</output>\n\n\n          <div id = \"bottom-div\">\n            <input type = \"range\" id = \"duration-slider\" defaultValue = {0} min = {0} max =  //time slider\n                {this.state.songLength} step = {0.01}/><br/>\n\n            <button id = \"play-button\" onClick = {this._play}>\n              {this.state.playing ? \"pause\" : \"play\"}\n            </button>\n          </div>\n        </>\n    );\n  }\n\n  componentDidMount(): void {\n\n    //super.componentDidMount();\n\n    const getThis = () => {\n      return this;\n    };\n\n    const realThis = getThis();\n    let newTempo: number;\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    const timeSliderElement = document.getElementById(\"duration-slider\");\n    const timeOutputElement = document.getElementById(\"duration-output\");\n\n    (tempoSliderElement as HTMLInputElement).addEventListener('input', function() {\n      if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n        newTempo = (realThis.state.initialTempo * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n            0.25))\n      }\n      else if (Number((tempoSliderElement as HTMLInputElement).value) === 0.5) {\n        newTempo = realThis.state.initialTempo\n      }\n      else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n        newTempo = (realThis.state.initialTempo * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n      }\n\n      (tempoOutputElement as HTMLInputElement).innerHTML = Math.round(newTempo).toString();\n\n      (tempoSliderElement as HTMLInputElement).addEventListener('mouseup', function() {\n        midiPlayer.setTempo(newTempo);\n      });\n    });\n\n    (timeSliderElement as HTMLInputElement).addEventListener('input', function() {\n      (timeOutputElement as HTMLInputElement).innerHTML =\n          (timeSliderElement as HTMLInputElement).value.toString();\n\n      (timeSliderElement as HTMLInputElement).addEventListener('mouseup', function() {\n        midiPlayer.skipToPercent((Number((timeSliderElement as HTMLInputElement).value))\n            / (midiPlayer.getSongTime()))\n\n      });\n    });\n    /*MOVING TIME SLIDER AND OUTPUT\n(timeOutputElement as HTMLInputElement).innerHTML = ac.currentTime.toFixed(2).toString();\n\n(timeSliderElement as HTMLInputElement).value =  //moving duration slider\n(midiPlayer.getSongTime() - midiPlayer.getSongTimeRemaining()).toString();*/\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport {MidiTest} from \"./MidiTest\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MidiTest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}