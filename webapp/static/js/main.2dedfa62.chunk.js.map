{"version":3,"sources":["MidiTest.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MidiTest","props","initialTempo","songLength","instrument","nodes","ac","AudioContext","midiPlayer","state","playing","_play","bind","_getTempoValue","_setNewTime","_setNewTempo","_displayTempo","handleEventBound","_handleEvent","MidiPlayer","Player","newTempo","this","tempoSliderElement","document","getElementById","Number","value","timeSliderElement","skipToPercent","getSongTime","setTempo","innerHTML","Math","round","toString","event","gain","name","channel","velocity","sopranoValue","getSopranoValue","altoValue","getAltoValue","tenorValue","getTenorValue","bassValue","getBassValue","node","play","noteName","currentTime","stop","pause","setState","instrumentName","window","navigator","userAgent","includes","instrumentLoadedBound","_instrumentLoaded","SoundFont","then","fetch","response","arrayBuffer","buffer","loadArrayBuffer","id","type","className","defaultValue","min","max","step","onInput","onMouseUp","_displayTime","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2dedfa62.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont, {Player} from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\n\ninterface Props {\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: number;\n  songLength: number;\n}\n\n//let midiPlayer: MidiPlayer.Player;\n\nfunction getSopranoValue(): number {\n  const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n  let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n  return Number(sopranoValue);\n}\n\nfunction getAltoValue(): number {\n  const altoSliderElement = document.getElementById(\"alto-slider\");\n  let altoValue = (altoSliderElement as HTMLInputElement).value;\n  return Number(altoValue);\n}\n\nfunction getTenorValue(): number {\n  const tenorSliderElement = document.getElementById(\"tenor-slider\");\n  let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n  return Number(tenorValue);\n}\n\nfunction getBassValue(): number {\n  const bassSliderElement = document.getElementById(\"bass-slider\");\n  let bassValue = (bassSliderElement as HTMLInputElement).value;\n  return Number(bassValue);\n}\n\n\nexport class MidiTest extends React.Component<Props, State> {\n  initialTempo: number | undefined;\n  songLength: number | undefined;\n  instrument: Player | undefined;\n  nodes: { [channel: number]: any } = {};\n  ac = new AudioContext();\n\n  midiPlayer: MidiPlayer.Player;    //NEW NEW NEW NEW NEW\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: 0,\n      songLength: 0,\n    };\n\n    this._play = this._play.bind(this);\n    this._getTempoValue = this._getTempoValue.bind(this);\n    this._setNewTime = this._setNewTime.bind(this);\n    this._setNewTempo = this._setNewTempo.bind(this);\n    this._displayTempo  = this._displayTempo.bind(this);\n\n    const handleEventBound = this._handleEvent.bind(this);     //NEW NEW NEW NEW NEW NEW\n    this.midiPlayer = new MidiPlayer.Player(handleEventBound); //NEW NEW NEW NEW NEW NEW\n\n\n  }\n\n  private _getTempoValue(): number {\n\n    let newTempo: number = this.state.initialTempo\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n\n    if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n      newTempo = (this.state.initialTempo * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n          0.25))\n    }\n    else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n      newTempo = (this.state.initialTempo * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n    }\n    return newTempo;\n  }\n\n  private _setNewTime(): void{\n    const timeSliderElement = document.getElementById(\"time-slider\");\n\n    this.midiPlayer.skipToPercent((Number((timeSliderElement as HTMLInputElement).value))\n        / (this.midiPlayer.getSongTime()))\n\n  }\n\n  private static _displayTime(): void {\n\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n\n    (timeOutputElement as HTMLOutputElement).innerHTML =\n        (timeSliderElement as HTMLInputElement).value.toString();\n\n  }\n\n  private _setNewTempo(): void {\n    this.midiPlayer.setTempo(this._getTempoValue());\n\n  }\n\n  private _displayTempo(): void {\n\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    (tempoOutputElement as HTMLInputElement).innerHTML = (Math.round(this._getTempoValue())).toString();\n\n  }\n\n  private _handleEvent(event: any): void {\n\n    let gain: number = 100;\n\n    if (event.name === 'Note on') {\n\n      switch (event.channel) {\n        case 1:\n          gain = event.velocity * (getSopranoValue() / 10);\n          break;\n        case 2:\n          gain = event.velocity * (getAltoValue() / 10);\n          break;\n        case 3:\n          gain = event.velocity * (getTenorValue() / 10);\n          break;\n        case 4:\n          gain = event.velocity * (getBassValue() / 10);\n          break;\n      }\n\n      const node = this.instrument?.play(event.noteName, this.ac.currentTime, {gain});\n\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n      }\n      this.nodes[event.channel] = node;\n      //document.querySelector('#track-' + event.track + ' code').innerHTML = JSON.stringify(event);\n    }\n    else if (event.name === 'Note off') {\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n        delete this.nodes[event.channel];\n      }\n    }\n\n    // document.getElementById('tempo-display').innerHTML = Player.tempo;\n    // document.getElementById('file-format-display').innerHTML = Player.format;\n    // document.getElementById('play-bar').style.width = 100 - Player.getSongPercentRemaining() + '%';\n  }\n\n  private _play(): undefined {\n    if (this.state.playing) {   //if playing, stop\n      this.midiPlayer!.pause();\n      this.setState({playing: false});\n      return undefined;\n    }\n    this.setState({playing: true});   //start playing\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n      'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n\n    // @ts-ignore\n    const instrumentLoadedBound = this._instrumentLoaded.bind(this);\n    SoundFont.instrument(this.ac as any, instrumentName as any).then(instrumentLoadedBound);\n    return undefined;\n  }\n\n  _instrumentLoaded(instrument: Player) {\n    this.instrument = instrument;\n    //const handleEventBound = this._handleEvent.bind(this);\n    const loadArrayBuffer = (buffer: ArrayBuffer) => {\n      //console.log(`loadArrayBuffer ${buffer.byteLength}`);\n      //this.midiPlayer = new MidiPlayer.Player(handleEventBound);\n\n      this.midiPlayer.loadArrayBuffer(buffer);\n      this.setState({initialTempo: 195});\n      this.setState({songLength: this.midiPlayer.getSongTime()});\n      this.midiPlayer.play();\n    }\n\n    //console.log(`instrument loaded`);\n    fetch('447_and_can_it_be.mid')\n      .then(response => response.arrayBuffer())\n      .then(buffer => loadArrayBuffer(buffer));\n  }\n\n  render() {\n    return (\n        <>\n          <form id = \"slider-form\">\n            <label>Soprano:</label>\n            <input type = \"range\" id = \"soprano-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n            <label>Alto:</label>\n            <input type = \"range\" id = \"alto-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n            <label>Tenor:</label>\n            <input type = \"range\" id = \"tenor-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n            <label>Bass:</label>\n            <input type = \"range\" id = \"bass-slider\" className = \"sliders\" defaultValue={1} min = {0} max = {2} step = {0.01}/><br/>\n            <label>Tempo:</label>\n            <input type = \"range\" id = \"tempo-slider\" defaultValue = {0.5} min = {0} max = {1} step = {0.01}\n                     onInput = {this._displayTempo} onMouseUp = {this._setNewTempo}/><br/>\n          </form>\n\n          <label>Tempo: </label>\n          <output id = \"tempo-output\">{this.state.initialTempo}</output>\n          <label>Time: </label>\n          <output id = \"time-output\">0</output>\n\n\n          <div id = \"bottom-div\">\n            <input type = \"range\" id = \"time-slider\" onInput = {MidiTest._displayTime} onMouseUp = {this._setNewTime}\n                   defaultValue = {0} min = {0} max =  //time slider\n                {this.state.songLength} step = {0.01}/><br/>\n\n            <button id = \"play-button\" onClick = {this._play}>\n              {this.state.playing ? \"pause\" : \"play\"}\n            </button>\n          </div>\n        </>\n    );\n  }\n\n  /*componentDidMount(): void {\n\n    //super.componentDidMount();\n\n    const getThis = () => {\n      return this;\n    };\n\n    const realThis = getThis();\n    //let newTempo: number;\n    //const tempoSliderElement = document.getElementById(\"tempo-slider\");\n    //const tempoOutputElement = document.getElementById(\"tempo-output\");\n    //const timeSliderElement = document.getElementById(\"time-slider\");\n    //const timeOutputElement = document.getElementById(\"time-output\");\n\n    /*(tempoSliderElement as HTMLInputElement).addEventListener('input', function() {\n      if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n        newTempo = (realThis.state.initialTempo * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n            0.25))\n      }\n      else if (Number((tempoSliderElement as HTMLInputElement).value) === 0.5) {\n        newTempo = realThis.state.initialTempo\n      }\n      else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n        newTempo = (realThis.state.initialTempo * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n      }\n\n      (tempoOutputElement as HTMLInputElement).innerHTML = Math.round(newTempo).toString();\n\n    });*/\n\n    /*(tempoSliderElement as HTMLInputElement).addEventListener('mouseup', function() {\n      realThis.midiPlayer.tempo = newTempo;\n    });*/\n\n    /*(timeSliderElement as HTMLInputElement).addEventListener('input', function() {\n      (timeOutputElement as HTMLInputElement).innerHTML =\n          (timeSliderElement as HTMLInputElement).value.toString();\n    });*/\n\n    /*(timeSliderElement as HTMLInputElement).addEventListener('mouseup', function() {\n      this.midiPlayer.skipToPercent((Number((timeSliderElement as HTMLInputElement).value))\n          / (this.midiPlayer.getSongTime()))\n\n    });*/\n    /*MOVING TIME SLIDER AND OUTPUT\n(timeOutputElement as HTMLInputElement).innerHTML = ac.currentTime.toFixed(2).toString();\n\n(timeSliderElement as HTMLInputElement).value =  //moving duration slider\n(midiPlayer.getSongTime() - midiPlayer.getSongTimeRemaining()).toString();*/\n  //}\n}\n","import React from 'react';\nimport './App.css';\nimport {MidiTest} from \"./MidiTest\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MidiTest/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}