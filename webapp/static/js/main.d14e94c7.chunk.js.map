{"version":3,"sources":["MidiPlaybackEnvironment.tsx","index.tsx","App.tsx"],"names":["MidiPlaybackEnvironment","props","initialTempo","initialTime","songLength","instrument","interval","nodes","audioContext","midiPlayer","state","playing","instrumentIsLoaded","experiencingUserInputOnTimeSlider","_handleEvent","bind","_instrumentLoaded","_play","_loadMidiFile","_getTempoValue","_setNewTime","_setNewTempo","_displayTempo","_getButtonText","_displayTime","_getTimeValue","MidiPlayer","Player","AudioContext","instrumentName","window","navigator","userAgent","includes","SoundFont","then","newTempo","Number","this","tempoSliderElement","document","getElementById","value","setState","timeSliderElement","isPlaying","skipToPercent","play","timeOutputElement","secondsSelected","innerHTML","setTempo","Math","round","toString","abs","getSongPercentRemaining","currentTime","_getCurrentPercent","event","gain","name","channel","velocity","_getSopranoValue","_getAltoValue","_getTenorValue","_getBassValue","node","noteName","stop","pause","console","log","midiFileDirectory","fetch","response","arrayBuffer","buffer","loadArrayBuffer","getTempo","getSongTime","id","type","defaultValue","min","max","step","onInput","onPointerUp","onMouseUp","onTouchEnd","onClick","setInterval","_getTimeOutput","clearInterval","sopranoValue","altoValue","tenorValue","bassValue","secondsElapsed","seconds","minutes","trunc","React","Component","ReactDOM","render","exact","path","component","to","hymnalDisplayList","useState","hymnalArray","setHymnalArray","hymnalsManifest","useEffect","json","data","catch","filter","hymnal","map","hymnalName","hymnDisplayList","hymnObjectArray","setHymnObjectArray","search","useLocation","URLSearchParams","get","hymnalURLName","oldName","urlName","i","length","convertToURL","hymnsManifest","appendZeros","number","array","title","filteredArray","push","filterArrayFor","hymn","index","songName","songNumber","midiFileName","pdfFileName","generatePdfFileName","hymnDirectoryName","generateHymnDirectoryName","hymnalDirectoryNameUrl","pdfFileDirectory"],"mappings":"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","file":"static/js/main.d14e94c7.chunk.js","sourcesContent":["import React from 'react';\nimport SoundFont, {Player} from 'soundfont-player';\nimport MidiPlayer from \"midi-player-js\";\nimport {AudioContext} from 'standardized-audio-context';\nimport './MidiPlaybackEnvironment.css';\n\ninterface Props {\n  midiFileDirectory: string;\n  pdfFileDirectory: string;\n}\n\ninterface State {\n  playing: boolean;\n  initialTempo: string;\n  initialTime: string;\n  songLength: number;\n  instrumentIsLoaded: boolean;\n  experiencingUserInputOnTimeSlider: boolean;\n}\n\nexport class MidiPlaybackEnvironment extends React.Component<Props, State> {\n  initialTempo: string | undefined;\n  initialTime: string | undefined;\n  songLength: number | undefined;\n  instrument: Player | undefined;\n  interval: number | undefined;\n  nodes: { [channel: number]: any } = {};\n  audioContext: AudioContext | undefined;\n  midiPlayer: MidiPlayer.Player;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      initialTempo: \"LOADING\",\n      initialTime: \"0:00\",\n      songLength: 0,\n      instrumentIsLoaded: false,\n      experiencingUserInputOnTimeSlider: false,\n    };\n\n    this._handleEvent = this._handleEvent.bind(this);\n    this._instrumentLoaded = this._instrumentLoaded.bind(this);\n    this._play = this._play.bind(this);\n    this._loadMidiFile = this._loadMidiFile.bind(this);\n    this._getTempoValue = this._getTempoValue.bind(this);\n    this._setNewTime = this._setNewTime.bind(this);\n    this._setNewTempo = this._setNewTempo.bind(this);\n    this._displayTempo = this._displayTempo.bind(this);\n    this._getButtonText = this._getButtonText.bind(this);\n    this._displayTime = this._displayTime.bind(this);\n    MidiPlaybackEnvironment._getTimeValue = MidiPlaybackEnvironment._getTimeValue.bind(this);\n    this.midiPlayer = new MidiPlayer.Player(this._handleEvent);\n\n    this.audioContext = new AudioContext();\n    const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n    //@ts-ignore\n    SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n  }\n\n  private static _getSopranoValue(): number {\n    const sopranoSliderElement = document.getElementById(\"soprano-slider\");\n    let sopranoValue = (sopranoSliderElement as HTMLInputElement).value;\n    return Number(sopranoValue);\n  }\n\n  private static _getAltoValue(): number {\n    const altoSliderElement = document.getElementById(\"alto-slider\");\n    let altoValue = (altoSliderElement as HTMLInputElement).value;\n    return Number(altoValue);\n  }\n\n  private static _getTenorValue(): number {\n    const tenorSliderElement = document.getElementById(\"tenor-slider\");\n    let tenorValue = (tenorSliderElement as HTMLInputElement).value;\n    return Number(tenorValue);\n  }\n\n  private static _getBassValue(): number {\n    const bassSliderElement = document.getElementById(\"bass-slider\");\n    let bassValue = (bassSliderElement as HTMLInputElement).value;\n    return Number(bassValue);\n  }\n\n  private static _getTimeValue(secondsElapsed: number): string {\n    let seconds: string;\n    let minutes: number = 0;\n\n    if (secondsElapsed < 10) {\n      seconds = \"0\" + Math.trunc(secondsElapsed);\n    }\n    else {\n      if (secondsElapsed < 60) {\n        minutes = 0;\n        seconds = (Math.trunc(secondsElapsed)).toString();\n      }\n      else if (secondsElapsed % 60 === 0) {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = \"00\";\n      }\n      else {\n        minutes = Number(Math.trunc(secondsElapsed / 60));\n        seconds = (secondsElapsed % 60).toString();\n      }\n    }\n    return minutes + \":\" + seconds;\n  }\n\n  private _getTempoValue(): number {\n    let newTempo: number = Number(this.state.initialTempo)\n    const tempoSliderElement = document.getElementById(\"tempo-slider\");\n\n    if (Number((tempoSliderElement as HTMLInputElement).value) < 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((1.5 * Number((tempoSliderElement as HTMLInputElement).value)) +\n          0.25))\n    }\n    else if (Number((tempoSliderElement as HTMLInputElement).value) > 0.5) {\n      newTempo = (Number(this.state.initialTempo) * ((6 * Number((tempoSliderElement as HTMLInputElement).value)) - 2))\n    }\n    return newTempo;\n  }\n\n  private _setNewTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: false});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n\n    if (this.midiPlayer.isPlaying()) {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n      this.midiPlayer.play();\n    }\n    else {\n      this.midiPlayer.skipToPercent(Number((timeSliderElement as HTMLInputElement).value));\n    }\n  }\n\n  private _displayTime(): void {\n    this.setState({experiencingUserInputOnTimeSlider: true});\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n    let secondsSelected = ((Number((timeSliderElement as HTMLInputElement).value) / 100) * this.state.songLength);\n\n    (timeOutputElement as HTMLOutputElement).innerHTML = MidiPlaybackEnvironment._getTimeValue(secondsSelected);\n  }\n\n  private _setNewTempo(): void {\n    this.midiPlayer.setTempo(this._getTempoValue());\n  }\n\n  private _displayTempo(): void {\n    const tempoOutputElement = document.getElementById(\"tempo-output\");\n    (tempoOutputElement as HTMLInputElement).innerHTML = (Math.round(this._getTempoValue())).toString();\n  }\n\n  private _getButtonText(): string {\n    if (!this.state.instrumentIsLoaded) {\n      return \"loading\";\n    }\n    else {\n      if (this.midiPlayer.isPlaying()) {\n        return \"pause\";\n      }\n      else {\n        return \"play\";\n      }\n    }\n  }\n\n  private _getCurrentPercent(): number {\n    return Math.abs(100 - this.midiPlayer.getSongPercentRemaining());\n  }\n\n  private _getTimeOutput(): string {\n    let currentTime = (this._getCurrentPercent() / 100) * this.state.songLength;\n\n    if (this.state.instrumentIsLoaded) {\n      return MidiPlaybackEnvironment._getTimeValue(currentTime);\n    }\n    else {\n      return \"LOADING\"\n    }\n  }\n\n  private _handleEvent(event: any): void {\n    let gain: number = 100;\n\n    if (event.name === 'Note on') {\n\n      switch (event.channel) {\n        case 1:\n          gain = event.velocity * (MidiPlaybackEnvironment._getSopranoValue() / 10);\n          break;\n        case 2:\n          gain = event.velocity * (MidiPlaybackEnvironment._getAltoValue() / 10);\n          break;\n        case 3:\n          gain = event.velocity * (MidiPlaybackEnvironment._getTenorValue() / 10);\n          break;\n        case 4:\n          gain = event.velocity * (MidiPlaybackEnvironment._getBassValue() / 10);\n          break;\n      }\n\n      const node = this.instrument!.play(event.noteName, this.audioContext!.currentTime, {gain}); //changed ? to !\n\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n      }\n\n      this.nodes[event.channel] = node;\n\n    }\n    else if (event.name === 'Note off') {\n      if (this.nodes[event.channel]) {\n        this.nodes[event.channel].stop();\n        delete this.nodes[event.channel];\n      }\n    }\n  }\n\n  private _loadMidiFile(): void {\n    if (!this.audioContext) {\n      this.audioContext = new AudioContext();\n      const instrumentName = window.navigator.userAgent.includes('Mobile') ?\n        'acoustic_grand_piano-mp3.js' : 'acoustic_grand_piano-ogg.js';\n      //@ts-ignore\n      SoundFont.instrument(this.audioContext, instrumentName).then(this._instrumentLoaded);\n    }\n  }\n\n  private _play(): undefined {\n    if (this.state.instrumentIsLoaded) {\n      if (this.state.playing) {   //if playing, stop\n        this.midiPlayer!.pause();\n        this.setState({playing: false});\n        return undefined;\n      }\n      this.setState({playing: true});   //start playing\n      this.midiPlayer.play();\n      return undefined;\n    }\n  }\n\n  private _instrumentLoaded(instrument: Player): undefined {\n    this.instrument = instrument;\n\n    const loadArrayBuffer = (buffer: ArrayBuffer) => {\n      this.midiPlayer.loadArrayBuffer(buffer);\n      this.setState({initialTempo: this.midiPlayer.getTempo().toString()});\n      this.setState({songLength: this.midiPlayer.getSongTime()});\n      this.setState({initialTime: \"0:00\"});\n    }\n\n    //todo (Cole): fetch this.props.midiFileDirectory\n    console.log(this.props.midiFileDirectory);\n    fetch('447_and_can_it_be.mid')\n        .then(response => response.arrayBuffer())\n        .then(buffer => loadArrayBuffer(buffer));\n\n    this.setState({instrumentIsLoaded: true});\n    return undefined\n  }\n\n  render() {\n    return (\n        <div>\n          <form id = \"slider-form\">\n            <label id = \"soprano-label\">Soprano:</label>\n            <input type = \"range\" id = \"soprano-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"alto-label\">Alto:</label>\n            <input type=\"range\" id=\"alto-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"tenor-label\">Tenor:</label>\n            <input type = \"range\" id = \"tenor-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"bass-label\">Bass:</label>\n            <input type = \"range\" id = \"bass-slider\" defaultValue = {1} min = {0} max = {2} step = {0.01}/><br/>\n            <label id = \"tempo-label\">Tempo:</label>\n            <input type = \"range\" id =\" tempo-slider\" defaultValue = {0.5} min = {0} max = {1} step = {0.01}\n                   onInput = {this._displayTempo} onPointerUp = {this._setNewTempo}/><br/>\n          </form>\n\n          <label>Tempo: </label>\n          <output id=\"tempo-output\">{this.state.initialTempo}</output>\n\n          <div id=\"bottom-div\">\n            <div id=\"time-slider-and-output-div\">\n              <output id=\"time-output\">{this.state.initialTime}</output>\n              <input type=\"range\" id=\"time-slider\" onInput={this._displayTime} onMouseUp={this._setNewTime}\n                     onTouchEnd={this._setNewTime} defaultValue={0} min={0} max={100} step={0.01}/><br/>\n            </div>\n\n            <button id=\"play-button\" onClick={this._play}>{this._getButtonText()}</button>\n          </div>\n        </div>\n    );\n  }\n\n  componentDidMount() {\n    const timeSliderElement = document.getElementById(\"time-slider\");\n    const timeOutputElement = document.getElementById(\"time-output\");\n\n    this.interval = window.setInterval(() => {\n      if (this.state.instrumentIsLoaded) {\n        if (this.midiPlayer.isPlaying()) {\n          if (!this.state.experiencingUserInputOnTimeSlider) {\n            (timeSliderElement as HTMLOutputElement).value = this._getCurrentPercent().toString();\n            (timeOutputElement as HTMLOutputElement).innerHTML = this._getTimeOutput();\n          }\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { HomePage, HymnalsPage, HymnsPage, PlayerPage } from './App';\nimport './index.css';\n\n\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n            <Route exact path=\"/Hymnals\" component={HymnalsPage}/>\n            <Route exact path=\"/Hymns\" component={HymnsPage}/>\n            <Route exact path = \"/Player\" component = {PlayerPage}/>\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n);","import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MidiPlaybackEnvironment } from './MidiPlaybackEnvironment';\nimport './App.css';\n\nconst HomePage = () => {\n    return (\n        <div>\n            <h1>Homepage </h1>\n            <p>This will be the home page for our app</p>\n            <p>Here will be several things the user can click on; Hymnals, Settings, Favorites, This Week, Etc.</p>\n            <Link to='/Hymnals'>Go To Hymnals</Link>\n        </div>\n    )\n};\n\nconst HymnalsPage = () => {\n    const [hymnalArray, setHymnalArray] = useState([]);\n    let hymnalDisplayList;\n    //todo (Cole): use relative url here to make more resilient if we move things around\n    const hymnalsManifest = 'https://crescendosw.github.io/hymnal/manifest.json'\n\n    useEffect(() => {\n        fetch(hymnalsManifest)\n            .then((response) => response.json())\n            .then((data) => {\n                setHymnalArray(data);\n            })\n            .catch(function() {\n                throw 'Error: HTTP-status 404, bad request, could not fetch: ' + hymnalsManifest;\n            });\n    }, []);\n\n    //todo (Cole): remove the filter to see all hymnals in the array\n    const filteredHymnalArray = hymnalArray.filter(hymnal => hymnal === \"Cantus Christi 2020\" );\n    hymnalDisplayList = filteredHymnalArray.map(function(hymnalName) {\n        return <li key={hymnalName}>\n            <Link to={`/Hymns?hymnal=${hymnalName}`}>{hymnalName}</Link></li>;\n    })\n\n    return (\n        <div>\n            <h1>Hymnals</h1>\n            <ul>{hymnalDisplayList}</ul>\n        </div>\n    )\n};\n\nconst HymnsPage = () => {\n    const [hymnObjectArray, setHymnObjectArray] = useState([]);\n    const search = useLocation().search;\n    const hymnalName = new URLSearchParams(search).get('hymnal');\n    const hymnalURLName: string = convertToURL(hymnalName);\n    //todo (Cole): use relative url here to make it more resilient if we move things around\n    const hymnsManifest = 'https://crescendosw.github.io/hymnal/' + hymnalURLName + '/manifest.json';\n    let hymnDisplayList;\n\n    function convertToURL(oldName: string | null): string {\n        let urlName: string = \"\";\n        if(oldName) {\n            for (let i = 0; i < oldName.length; i++) {\n                if(oldName[i] === \" \") {\n                    urlName += \"%20\";\n                }\n                else {\n                    urlName += oldName[i];\n                }\n            }\n        }\n        return urlName;\n    }\n\n    function appendZeros(number: number | null): string | undefined {\n        if(number) {\n\n            switch(number.toString().length) {\n                case 1:\n                    return \"00\" + number;\n                case 2:\n                    return \"0\" + number;\n            }\n        }\n        console.log(\"Error: zeros appended improperly\");\n    }\n\n    function filterArrayFor(array: any, title: string): { number: number; title: string; psalm: string; }[] {\n        let filteredArray = [];\n        for(let i = 0; i < array.length; i++) {\n            if(array[i].title === title) {\n                filteredArray.push(array[i]);\n            }\n        }\n        return filteredArray;\n    }\n\n    useEffect(() => {\n        fetch(hymnsManifest)\n            .then((response) => response.json())\n            .then((data) => {\n                setHymnObjectArray(data);\n            })\n            .catch(function() {\n                throw 'Error: HTTP-status 404, bad request, could not fetch: ' + hymnsManifest;\n            });\n    }, []);\n\n    //todo (Cole): remove the filter to see all hymns in the array\n    const filteredHymnObjectArray = filterArrayFor(hymnObjectArray, \"And Can It Be That I Should Gain\");\n    hymnDisplayList = filteredHymnObjectArray.map((hymn: { number: number; title: string; psalm: string; }, index) => {\n        return <li key = {hymn.number}>\n            <Link to={`/Player?hymnal=${hymnalURLName}&title=${hymn.title}&number=${appendZeros(hymn.number)}`}>\n            {hymn.title}</Link></li>;\n    })\n\n    return (\n        <div>\n            <h1>{hymnalName}</h1>\n            <ul>{hymnDisplayList}</ul>\n        </div>\n    )\n};\n\nconst PlayerPage = () => {\n    function convertToURL(oldName: string | null): string {\n        let urlName: string = \"\";\n        if(oldName) {\n            for (let i = 0; i < oldName.length; i++) {\n                if(oldName[i] === \" \") {\n                    urlName += \"%20\";\n                }\n                else {\n                    urlName += oldName[i];\n                }\n            }\n        }\n        return urlName;\n    }\n\n    function generateMidiFileName(title: string | null, number: string | null): string {\n        return number + \"%20-%20\" + convertToURL(title) + \".mid\";\n    }\n\n    function generatePdfFileName(title: string | null, number: string | null): string {\n        return number + \" - \" + title + \".pdf\";\n    }\n\n    function generateHymnDirectoryName(title: string | null, number: string | null): string {\n        return number + \"%20-%20\" + convertToURL(title);\n    }\n\n    const search = useLocation().search;\n    const songName = new URLSearchParams(search).get('title');\n    const songNumber = new URLSearchParams(search).get('number');\n    const hymnalName = new URLSearchParams(search).get('hymnal');\n    const midiFileName = generateMidiFileName(songName, songNumber);\n    const pdfFileName = generatePdfFileName(songName, songNumber);\n    const hymnDirectoryName = generateHymnDirectoryName(songName, songNumber);\n    const hymnalDirectoryNameUrl = convertToURL(hymnalName);\n\n    //todo (Cole): use relative url here to make it more resilient if we move things around\n    const midiFileDirectory: string = 'https://crescendosw.com/hymnal/' + hymnalDirectoryNameUrl + '/' +\n        hymnDirectoryName + '/' + midiFileName;\n    const pdfFileDirectory: string = 'https://crescendosw.com/hymnal/' + hymnalDirectoryNameUrl + '/' +\n        hymnDirectoryName + '/' + pdfFileName;\n\n    return (\n        <MidiPlaybackEnvironment midiFileDirectory={midiFileDirectory} pdfFileDirectory={pdfFileDirectory}/>\n    )\n};\n\nexport { HomePage, HymnalsPage, HymnsPage, PlayerPage } ;"],"sourceRoot":""}